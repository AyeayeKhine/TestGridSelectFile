#region Source Code Information
/*===================================================================================
	 Application Name		:	MRCS
	 Project Name			:	Presentation.Client.DotNetCore
	 Project Description	:	
	 FrameworkVersion		:	net7.0
	===================================================================================
	 Copyright    Â© 2023 InfoSolve Co.,Ltd.  All rights reserved.
	 THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
	 OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
	 LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
	 FITNESS FOR A PARTICULAR PURPOSE.
	===================================================================================
	 Created Date			:	3/9/2023 9:09:01 PM
	 Author					:	Aung Si Thu Htaik
	 Machine				:	KOPAUK-PC
	 User					:	aungs
	 Version				:	1.0.0.0
	===================================================================================
	 Changes History
	 Date		Updated Description		Updated by
	-----------------------------------------------------------------------------------
	------------------------------------------------------------------------------------
	===================================================================================*/
#endregion
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a InfoSolve Code Generater.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace TestGridSelectFile
{    
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    using Microsoft.AspNetCore.Mvc.Rendering;

    public static class HtmlHelpers
    {
         public static string IsSelected(this IHtmlHelper html, string area = null, string controller = null, string action = null, string cssClass = null,string menuGroup=null)
        {
            if (String.IsNullOrEmpty(cssClass))
                cssClass = "active";            

            string currentAction = (string)html.ViewContext.RouteData.Values["action"];
            string currentController = (string)html.ViewContext.RouteData.Values["controller"];
            string currentArea = (string)html.ViewContext.RouteData.Values["area"];
            string currentMenuGroup = "";

            if (String.IsNullOrEmpty(controller))
                controller = currentController;

            if (String.IsNullOrEmpty(action))
            {
                action = currentAction;

            }else
            {
                
                if (action.LastIndexOf("/") > -1)
                {
                    action = action.Substring(action.LastIndexOf("/")+1);
                    if (action=="List")
                    {
                        currentMenuGroup = "Repository";
                        if (menuGroup=="Master Data")
                        {
                            currentMenuGroup = "Master Data";
                        }
                    }
                    if (action == "Index")
                    {
                        currentMenuGroup = "Dashboard";
                    }
                    if (action == "Create")
                    {
                        currentMenuGroup = "Quick Entry";
                    }
                }

            }

            if (currentAction == "Detail")
            {                
                action = currentAction;
                currentMenuGroup = "Repository";
            }

            if (String.IsNullOrEmpty(area))
            {
                area = currentArea;
            }



            return  area == currentArea && controller == currentController && action == currentAction && menuGroup== currentMenuGroup  ?
                cssClass : String.Empty;
        }
        public static string IsSelectedSetting(this IHtmlHelper html, string modules = null, string cssClass = null)
        {
            if (String.IsNullOrEmpty(cssClass))
                cssClass = "active";

            string currentAction = (string)html.ViewContext.RouteData.Values["action"];
            string currentController = (string)html.ViewContext.RouteData.Values["controller"];
            string currentArea = (string)html.ViewContext.RouteData.Values["area"];

            if (currentArea!=null)
            {
                return modules.Contains(currentArea) ?
                cssClass : String.Empty;
            }

            return  String.Empty;
        }
        public static string PageClass(this IHtmlHelper htmlHelper)
        {
            string currentAction = (string)htmlHelper.ViewContext.RouteData.Values["action"];
            return currentAction;
        }


    }
}

namespace TestGridSelectFile
{
    using System;
    using System.Linq;
    using System.Text.Encodings.Web;
    using System.Text.RegularExpressions;
    using Microsoft.AspNetCore.Html;
    using Microsoft.AspNetCore.Mvc.Razor;
    using Microsoft.AspNetCore.Mvc.Rendering;
    public static class HtmlHelperExtensions
    {
        private const string _partialViewScriptItemPrefix = "scripts_";
        public static IHtmlContent PartialSectionScripts(this IHtmlHelper htmlHelper, Func<object, HelperResult> template)
        {
            htmlHelper.ViewContext.HttpContext.Items[_partialViewScriptItemPrefix + Guid.NewGuid()] = template;
            return new HtmlContentBuilder();
        }
        public static IHtmlContent RenderPartialSectionScripts(this IHtmlHelper htmlHelper)
        {
            var partialSectionScripts = htmlHelper.ViewContext.HttpContext.Items.Keys
                .Where(k => Regex.IsMatch(
                    k.ToString(),
                    "^" + _partialViewScriptItemPrefix + "([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})$"));
            var contentBuilder = new HtmlContentBuilder();
            foreach (var key in partialSectionScripts)
            {
                var template = htmlHelper.ViewContext.HttpContext.Items[key] as Func<object, HelperResult>;
                if (template != null)
                {
                    var writer = new System.IO.StringWriter();
                    template(null).WriteTo(writer, HtmlEncoder.Default);
                    contentBuilder.AppendHtml(writer.ToString());
                }
            }
            return contentBuilder;
        }
    }
}

namespace Microsoft.AspNetCore.Mvc.Rendering
{
    using System;
    using System.IO;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Html;    
    using Microsoft.AspNetCore.Mvc.ViewEngines;
    

    /// <summary>
    /// PartialView-related extensions for <see cref="IHtmlHelper"/>.
    /// </summary>
    public static class HtmlHelperPartialExtensions
    {
        /// <summary>
        /// Returns HTML markup for the specified partial view.
        /// </summary>
        /// <param name="htmlHelper">The <see cref="IHtmlHelper"/> instance this method extends.</param>
        /// <param name="partialViewName">
        /// The name or path of the partial view used to create the HTML markup. Must not be <c>null</c>.
        /// </param>
        /// <returns>
        /// A <see cref="Task"/> that on completion returns a new <see cref="IHtmlContent"/> instance containing
        /// the created HTML.
        /// </returns>
        public static Task<IHtmlContent> PartialAsync(
            this IHtmlHelper htmlHelper, 
            string partialViewName, ICompositeViewEngine compositeViewEngine, bool checkCustomPartialView)
        {
            if (htmlHelper == null)
            {
                throw new ArgumentNullException(nameof(htmlHelper));
            }

            if (partialViewName == null)
            {
                throw new ArgumentNullException(nameof(partialViewName));
            }
            if(checkCustomPartialView) //with path
            {                
                string getGivenPartialView = Path.GetFileNameWithoutExtension(partialViewName);
                string targetPartialViewName = partialViewName.Replace(getGivenPartialView, "_Custom" + getGivenPartialView.TrimStart('_'));
                var result = compositeViewEngine.GetView(htmlHelper.ViewContext.ExecutingFilePath, targetPartialViewName, false);
                if (result.Success)
                {
                    partialViewName = targetPartialViewName;
                }
            }
            return htmlHelper.PartialAsync(partialViewName, htmlHelper.ViewData.Model, viewData: null);
        }
    

     /// <summary>
        /// Returns HTML markup for the specified partial view.
        /// </summary>
        /// <param name="htmlHelper">The <see cref="IHtmlHelper"/> instance this method extends.</param>
        /// <param name="partialViewName">
        /// The name or path of the partial view used to create the HTML markup. Must not be <c>null</c>.
        /// </param>
        /// <returns>
        /// A <see cref="Task"/> that on completion returns a new <see cref="IHtmlContent"/> instance containing
        /// the created HTML.
        /// </returns>
        public static Task<IHtmlContent> PartialAsync(
            this IHtmlHelper htmlHelper,
            string partialViewName, object model,ICompositeViewEngine compositeViewEngine, bool checkCustomPartialView)
        {
            if (htmlHelper == null)
            {
                throw new ArgumentNullException(nameof(htmlHelper));
            }

            if (partialViewName == null)
            {
                throw new ArgumentNullException(nameof(partialViewName));
            }

            if (checkCustomPartialView) //with path
            {
                string getGivenPartialView = Path.GetFileNameWithoutExtension(partialViewName);
                string targetPartialViewName = partialViewName.Replace(getGivenPartialView, "_Custom" + getGivenPartialView.TrimStart('_'));
                var result = compositeViewEngine.GetView(htmlHelper.ViewContext.ExecutingFilePath, targetPartialViewName, false);
                if (result.Success)
                {
                    partialViewName = targetPartialViewName;
                }
            }
            return htmlHelper.PartialAsync(partialViewName, model, viewData: null);
        }
    }
}